/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/~__root'
import { Route as IndexRouteImport } from './pages/~index'
import { Route as VladniBudgetNameRouteImport } from './pages/~vladni/~$budgetName'
import { Route as VladniIndexRouteImport } from './pages/~vladni/~index'
import { Route as SupportIndexRouteImport } from './pages/~support/~index'
import { Route as PublishedIndexRouteImport } from './pages/~published/~index'
import { Route as MyIndexRouteImport } from './pages/~my/~index'
import { Route as CompareIndexRouteImport } from './pages/~compare/~index'
import { Route as AgregatedIndexRouteImport } from './pages/~agregated/~index'
import { Route as VladniBudgetNameIndexRouteImport } from './pages/~vladni/~$budgetName/~index'
import { Route as VladniBudgetNameVydajeSplatRouteImport } from './pages/~vladni/~$budgetName/~vydaje.$'
import { Route as VladniBudgetNamePrijmySplatRouteImport } from './pages/~vladni/~$budgetName/~prijmy.$'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VladniBudgetNameRoute = VladniBudgetNameRouteImport.update({
  id: '/vladni/$budgetName',
  path: '/vladni/$budgetName',
  getParentRoute: () => rootRouteImport,
} as any)
const VladniIndexRoute = VladniIndexRouteImport.update({
  id: '/vladni/',
  path: '/vladni/',
  getParentRoute: () => rootRouteImport,
} as any)
const SupportIndexRoute = SupportIndexRouteImport.update({
  id: '/support/',
  path: '/support/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublishedIndexRoute = PublishedIndexRouteImport.update({
  id: '/published/',
  path: '/published/',
  getParentRoute: () => rootRouteImport,
} as any)
const MyIndexRoute = MyIndexRouteImport.update({
  id: '/my/',
  path: '/my/',
  getParentRoute: () => rootRouteImport,
} as any)
const CompareIndexRoute = CompareIndexRouteImport.update({
  id: '/compare/',
  path: '/compare/',
  getParentRoute: () => rootRouteImport,
} as any)
const AgregatedIndexRoute = AgregatedIndexRouteImport.update({
  id: '/agregated/',
  path: '/agregated/',
  getParentRoute: () => rootRouteImport,
} as any)
const VladniBudgetNameIndexRoute = VladniBudgetNameIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => VladniBudgetNameRoute,
} as any)
const VladniBudgetNameVydajeSplatRoute =
  VladniBudgetNameVydajeSplatRouteImport.update({
    id: '/vydaje/$',
    path: '/vydaje/$',
    getParentRoute: () => VladniBudgetNameRoute,
  } as any)
const VladniBudgetNamePrijmySplatRoute =
  VladniBudgetNamePrijmySplatRouteImport.update({
    id: '/prijmy/$',
    path: '/prijmy/$',
    getParentRoute: () => VladniBudgetNameRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agregated': typeof AgregatedIndexRoute
  '/compare': typeof CompareIndexRoute
  '/my': typeof MyIndexRoute
  '/published': typeof PublishedIndexRoute
  '/support': typeof SupportIndexRoute
  '/vladni': typeof VladniIndexRoute
  '/vladni/$budgetName': typeof VladniBudgetNameRouteWithChildren
  '/vladni/$budgetName/': typeof VladniBudgetNameIndexRoute
  '/vladni/$budgetName/prijmy/$': typeof VladniBudgetNamePrijmySplatRoute
  '/vladni/$budgetName/vydaje/$': typeof VladniBudgetNameVydajeSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agregated': typeof AgregatedIndexRoute
  '/compare': typeof CompareIndexRoute
  '/my': typeof MyIndexRoute
  '/published': typeof PublishedIndexRoute
  '/support': typeof SupportIndexRoute
  '/vladni': typeof VladniIndexRoute
  '/vladni/$budgetName': typeof VladniBudgetNameIndexRoute
  '/vladni/$budgetName/prijmy/$': typeof VladniBudgetNamePrijmySplatRoute
  '/vladni/$budgetName/vydaje/$': typeof VladniBudgetNameVydajeSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agregated/': typeof AgregatedIndexRoute
  '/compare/': typeof CompareIndexRoute
  '/my/': typeof MyIndexRoute
  '/published/': typeof PublishedIndexRoute
  '/support/': typeof SupportIndexRoute
  '/vladni/': typeof VladniIndexRoute
  '/vladni/$budgetName': typeof VladniBudgetNameRouteWithChildren
  '/vladni/$budgetName/': typeof VladniBudgetNameIndexRoute
  '/vladni/$budgetName/prijmy/$': typeof VladniBudgetNamePrijmySplatRoute
  '/vladni/$budgetName/vydaje/$': typeof VladniBudgetNameVydajeSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agregated'
    | '/compare'
    | '/my'
    | '/published'
    | '/support'
    | '/vladni'
    | '/vladni/$budgetName'
    | '/vladni/$budgetName/'
    | '/vladni/$budgetName/prijmy/$'
    | '/vladni/$budgetName/vydaje/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/agregated'
    | '/compare'
    | '/my'
    | '/published'
    | '/support'
    | '/vladni'
    | '/vladni/$budgetName'
    | '/vladni/$budgetName/prijmy/$'
    | '/vladni/$budgetName/vydaje/$'
  id:
    | '__root__'
    | '/'
    | '/agregated/'
    | '/compare/'
    | '/my/'
    | '/published/'
    | '/support/'
    | '/vladni/'
    | '/vladni/$budgetName'
    | '/vladni/$budgetName/'
    | '/vladni/$budgetName/prijmy/$'
    | '/vladni/$budgetName/vydaje/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgregatedIndexRoute: typeof AgregatedIndexRoute
  CompareIndexRoute: typeof CompareIndexRoute
  MyIndexRoute: typeof MyIndexRoute
  PublishedIndexRoute: typeof PublishedIndexRoute
  SupportIndexRoute: typeof SupportIndexRoute
  VladniIndexRoute: typeof VladniIndexRoute
  VladniBudgetNameRoute: typeof VladniBudgetNameRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vladni/$budgetName': {
      id: '/vladni/$budgetName'
      path: '/vladni/$budgetName'
      fullPath: '/vladni/$budgetName'
      preLoaderRoute: typeof VladniBudgetNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vladni/': {
      id: '/vladni/'
      path: '/vladni'
      fullPath: '/vladni'
      preLoaderRoute: typeof VladniIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/support/': {
      id: '/support/'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/published/': {
      id: '/published/'
      path: '/published'
      fullPath: '/published'
      preLoaderRoute: typeof PublishedIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my/': {
      id: '/my/'
      path: '/my'
      fullPath: '/my'
      preLoaderRoute: typeof MyIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/compare/': {
      id: '/compare/'
      path: '/compare'
      fullPath: '/compare'
      preLoaderRoute: typeof CompareIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agregated/': {
      id: '/agregated/'
      path: '/agregated'
      fullPath: '/agregated'
      preLoaderRoute: typeof AgregatedIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vladni/$budgetName/': {
      id: '/vladni/$budgetName/'
      path: '/'
      fullPath: '/vladni/$budgetName/'
      preLoaderRoute: typeof VladniBudgetNameIndexRouteImport
      parentRoute: typeof VladniBudgetNameRoute
    }
    '/vladni/$budgetName/vydaje/$': {
      id: '/vladni/$budgetName/vydaje/$'
      path: '/vydaje/$'
      fullPath: '/vladni/$budgetName/vydaje/$'
      preLoaderRoute: typeof VladniBudgetNameVydajeSplatRouteImport
      parentRoute: typeof VladniBudgetNameRoute
    }
    '/vladni/$budgetName/prijmy/$': {
      id: '/vladni/$budgetName/prijmy/$'
      path: '/prijmy/$'
      fullPath: '/vladni/$budgetName/prijmy/$'
      preLoaderRoute: typeof VladniBudgetNamePrijmySplatRouteImport
      parentRoute: typeof VladniBudgetNameRoute
    }
  }
}

interface VladniBudgetNameRouteChildren {
  VladniBudgetNameIndexRoute: typeof VladniBudgetNameIndexRoute
  VladniBudgetNamePrijmySplatRoute: typeof VladniBudgetNamePrijmySplatRoute
  VladniBudgetNameVydajeSplatRoute: typeof VladniBudgetNameVydajeSplatRoute
}

const VladniBudgetNameRouteChildren: VladniBudgetNameRouteChildren = {
  VladniBudgetNameIndexRoute: VladniBudgetNameIndexRoute,
  VladniBudgetNamePrijmySplatRoute: VladniBudgetNamePrijmySplatRoute,
  VladniBudgetNameVydajeSplatRoute: VladniBudgetNameVydajeSplatRoute,
}

const VladniBudgetNameRouteWithChildren =
  VladniBudgetNameRoute._addFileChildren(VladniBudgetNameRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgregatedIndexRoute: AgregatedIndexRoute,
  CompareIndexRoute: CompareIndexRoute,
  MyIndexRoute: MyIndexRoute,
  PublishedIndexRoute: PublishedIndexRoute,
  SupportIndexRoute: SupportIndexRoute,
  VladniIndexRoute: VladniIndexRoute,
  VladniBudgetNameRoute: VladniBudgetNameRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
