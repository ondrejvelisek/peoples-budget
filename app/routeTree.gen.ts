/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/~__root'
import { Route as IndexImport } from './pages/~index'
import { Route as R2024ProvidersImport } from './pages/~2024/~_providers'
import { Route as SupportIndexImport } from './pages/~support/~index'
import { Route as PublishedIndexImport } from './pages/~published/~index'
import { Route as MyIndexImport } from './pages/~my/~index'
import { Route as CompareIndexImport } from './pages/~compare/~index'
import { Route as AgregatedIndexImport } from './pages/~agregated/~index'
import { Route as R2025IndexImport } from './pages/~2025/~index'
import { Route as R2024ProvidersIndexImport } from './pages/~2024/~_providers.index'
import { Route as R2024ProvidersSplatImport } from './pages/~2024/~_providers.$'

// Create Virtual Routes

const R2024Import = createFileRoute('/2024')()

// Create/Update Routes

const R2024Route = R2024Import.update({
  id: '/2024',
  path: '/2024',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const R2024ProvidersRoute = R2024ProvidersImport.update({
  id: '/_providers',
  getParentRoute: () => R2024Route,
} as any)

const SupportIndexRoute = SupportIndexImport.update({
  id: '/support/',
  path: '/support/',
  getParentRoute: () => rootRoute,
} as any)

const PublishedIndexRoute = PublishedIndexImport.update({
  id: '/published/',
  path: '/published/',
  getParentRoute: () => rootRoute,
} as any)

const MyIndexRoute = MyIndexImport.update({
  id: '/my/',
  path: '/my/',
  getParentRoute: () => rootRoute,
} as any)

const CompareIndexRoute = CompareIndexImport.update({
  id: '/compare/',
  path: '/compare/',
  getParentRoute: () => rootRoute,
} as any)

const AgregatedIndexRoute = AgregatedIndexImport.update({
  id: '/agregated/',
  path: '/agregated/',
  getParentRoute: () => rootRoute,
} as any)

const R2025IndexRoute = R2025IndexImport.update({
  id: '/2025/',
  path: '/2025/',
  getParentRoute: () => rootRoute,
} as any)

const R2024ProvidersIndexRoute = R2024ProvidersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => R2024ProvidersRoute,
} as any)

const R2024ProvidersSplatRoute = R2024ProvidersSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => R2024ProvidersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/2025/': {
      id: '/2025/'
      path: '/2025'
      fullPath: '/2025'
      preLoaderRoute: typeof R2025IndexImport
      parentRoute: typeof rootRoute
    }
    '/agregated/': {
      id: '/agregated/'
      path: '/agregated'
      fullPath: '/agregated'
      preLoaderRoute: typeof AgregatedIndexImport
      parentRoute: typeof rootRoute
    }
    '/compare/': {
      id: '/compare/'
      path: '/compare'
      fullPath: '/compare'
      preLoaderRoute: typeof CompareIndexImport
      parentRoute: typeof rootRoute
    }
    '/my/': {
      id: '/my/'
      path: '/my'
      fullPath: '/my'
      preLoaderRoute: typeof MyIndexImport
      parentRoute: typeof rootRoute
    }
    '/published/': {
      id: '/published/'
      path: '/published'
      fullPath: '/published'
      preLoaderRoute: typeof PublishedIndexImport
      parentRoute: typeof rootRoute
    }
    '/support/': {
      id: '/support/'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportIndexImport
      parentRoute: typeof rootRoute
    }
    '/2024': {
      id: '/2024'
      path: '/2024'
      fullPath: '/2024'
      preLoaderRoute: typeof R2024Import
      parentRoute: typeof rootRoute
    }
    '/2024/_providers': {
      id: '/2024/_providers'
      path: '/2024'
      fullPath: '/2024'
      preLoaderRoute: typeof R2024ProvidersImport
      parentRoute: typeof R2024Route
    }
    '/2024/_providers/$': {
      id: '/2024/_providers/$'
      path: '/$'
      fullPath: '/2024/$'
      preLoaderRoute: typeof R2024ProvidersSplatImport
      parentRoute: typeof R2024ProvidersImport
    }
    '/2024/_providers/': {
      id: '/2024/_providers/'
      path: '/'
      fullPath: '/2024/'
      preLoaderRoute: typeof R2024ProvidersIndexImport
      parentRoute: typeof R2024ProvidersImport
    }
  }
}

// Create and export the route tree

interface R2024ProvidersRouteChildren {
  R2024ProvidersSplatRoute: typeof R2024ProvidersSplatRoute
  R2024ProvidersIndexRoute: typeof R2024ProvidersIndexRoute
}

const R2024ProvidersRouteChildren: R2024ProvidersRouteChildren = {
  R2024ProvidersSplatRoute: R2024ProvidersSplatRoute,
  R2024ProvidersIndexRoute: R2024ProvidersIndexRoute,
}

const R2024ProvidersRouteWithChildren = R2024ProvidersRoute._addFileChildren(
  R2024ProvidersRouteChildren,
)

interface R2024RouteChildren {
  R2024ProvidersRoute: typeof R2024ProvidersRouteWithChildren
}

const R2024RouteChildren: R2024RouteChildren = {
  R2024ProvidersRoute: R2024ProvidersRouteWithChildren,
}

const R2024RouteWithChildren = R2024Route._addFileChildren(R2024RouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/2025': typeof R2025IndexRoute
  '/agregated': typeof AgregatedIndexRoute
  '/compare': typeof CompareIndexRoute
  '/my': typeof MyIndexRoute
  '/published': typeof PublishedIndexRoute
  '/support': typeof SupportIndexRoute
  '/2024': typeof R2024ProvidersRouteWithChildren
  '/2024/$': typeof R2024ProvidersSplatRoute
  '/2024/': typeof R2024ProvidersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/2025': typeof R2025IndexRoute
  '/agregated': typeof AgregatedIndexRoute
  '/compare': typeof CompareIndexRoute
  '/my': typeof MyIndexRoute
  '/published': typeof PublishedIndexRoute
  '/support': typeof SupportIndexRoute
  '/2024': typeof R2024ProvidersIndexRoute
  '/2024/$': typeof R2024ProvidersSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/2025/': typeof R2025IndexRoute
  '/agregated/': typeof AgregatedIndexRoute
  '/compare/': typeof CompareIndexRoute
  '/my/': typeof MyIndexRoute
  '/published/': typeof PublishedIndexRoute
  '/support/': typeof SupportIndexRoute
  '/2024': typeof R2024RouteWithChildren
  '/2024/_providers': typeof R2024ProvidersRouteWithChildren
  '/2024/_providers/$': typeof R2024ProvidersSplatRoute
  '/2024/_providers/': typeof R2024ProvidersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/2025'
    | '/agregated'
    | '/compare'
    | '/my'
    | '/published'
    | '/support'
    | '/2024'
    | '/2024/$'
    | '/2024/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/2025'
    | '/agregated'
    | '/compare'
    | '/my'
    | '/published'
    | '/support'
    | '/2024'
    | '/2024/$'
  id:
    | '__root__'
    | '/'
    | '/2025/'
    | '/agregated/'
    | '/compare/'
    | '/my/'
    | '/published/'
    | '/support/'
    | '/2024'
    | '/2024/_providers'
    | '/2024/_providers/$'
    | '/2024/_providers/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R2025IndexRoute: typeof R2025IndexRoute
  AgregatedIndexRoute: typeof AgregatedIndexRoute
  CompareIndexRoute: typeof CompareIndexRoute
  MyIndexRoute: typeof MyIndexRoute
  PublishedIndexRoute: typeof PublishedIndexRoute
  SupportIndexRoute: typeof SupportIndexRoute
  R2024Route: typeof R2024RouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R2025IndexRoute: R2025IndexRoute,
  AgregatedIndexRoute: AgregatedIndexRoute,
  CompareIndexRoute: CompareIndexRoute,
  MyIndexRoute: MyIndexRoute,
  PublishedIndexRoute: PublishedIndexRoute,
  SupportIndexRoute: SupportIndexRoute,
  R2024Route: R2024RouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/2025/",
        "/agregated/",
        "/compare/",
        "/my/",
        "/published/",
        "/support/",
        "/2024"
      ]
    },
    "/": {
      "filePath": "~index.tsx"
    },
    "/2025/": {
      "filePath": "~2025/~index.tsx"
    },
    "/agregated/": {
      "filePath": "~agregated/~index.tsx"
    },
    "/compare/": {
      "filePath": "~compare/~index.tsx"
    },
    "/my/": {
      "filePath": "~my/~index.tsx"
    },
    "/published/": {
      "filePath": "~published/~index.tsx"
    },
    "/support/": {
      "filePath": "~support/~index.tsx"
    },
    "/2024": {
      "filePath": "~2024",
      "children": [
        "/2024/_providers"
      ]
    },
    "/2024/_providers": {
      "filePath": "~2024/~_providers.tsx",
      "parent": "/2024",
      "children": [
        "/2024/_providers/$",
        "/2024/_providers/"
      ]
    },
    "/2024/_providers/$": {
      "filePath": "~2024/~_providers.$.tsx",
      "parent": "/2024/_providers"
    },
    "/2024/_providers/": {
      "filePath": "~2024/~_providers.index.tsx",
      "parent": "/2024/_providers"
    }
  }
}
ROUTE_MANIFEST_END */
